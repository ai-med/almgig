# This file is part of Adversarial Learned Molecular Graph Inference and Generation (ALMGIG).
#
# ALMGIG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ALMGIG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ALMGIG. If not, see <https://www.gnu.org/licenses/>.
import argparse
import bz2
import logging
from pathlib import Path
import numpy as np
from guacamol.distribution_matching_generator import DistributionMatchingGenerator
from tqdm import tqdm

from gan.mol.metrics.distribution_learning import assess_distribution_learning
from gan.mol.metrics.scores import ValidityScore
from gan.mol.validate import save_metrics


class FileBasedGenerator(DistributionMatchingGenerator):

    def __init__(self, filename, strict=False):
        self._filename = filename
        self._strict = strict

        self._data = None

    def _get_data(self):
        if self._data is None:
            data = []
            with bz2.open(self._filename, "rt") as fin:
                for line in fin:
                    smi = line.strip()#.split(",", 2)
                    data.append(smi)
            self._data = data
        return self._data

    def generate(self, number_samples):
        data = self._get_data()
        assert len(data) > number_samples

        rnd = np.random.RandomState()
        idx = rnd.randint(len(data), size=number_samples)

        sample = []
        for i in tqdm(idx):
            smi = data[i]
            if self._strict and not ValidityScore.is_valid_smiles(smi):
                smi = ''
            sample.append(smi)

        return sample


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--train_smiles', required=True,
        help='Path to text file with SMILES used for training.')
    parser.add_argument(
        '-i', '--input', required=True,
        help='Path to bzipped file of SMILES generated by grammarVAE.')
    parser.add_argument(
        '-o', '--output', required=True,
        help='Path to JSON file to write metrics to.')
    parser.add_argument('--strict', action='store_true', default=False,
                        help='Whether to consider SMILES of more than one molecule as invalid.')

    args = parser.parse_args()

    logger = logging.getLogger('guacamol')
    sh = logging.StreamHandler()
    sh.setFormatter(logging.Formatter(logging.BASIC_FORMAT))
    logger.addHandler(sh)
    logger.setLevel(logging.INFO)

    model = FileBasedGenerator(args.input, strict=args.strict)

    out_path = Path(args.output)
    save_metrics(model, args.train_smiles, out_path.with_suffix('.csv'))

    assess_distribution_learning(model,
                                 args.train_smiles,
                                 args.output,
                                 10000)


if __name__ == '__main__':
    main()
